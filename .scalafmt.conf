version = "3.7.17"
maxColumn = 120
encoding = "UTF-8"
runner.dialect = scala213

docstrings {
  style = Asterisk
  forceBlankLineBefore = false
  wrap = false
}

indent {
  main = 4
  callSite = 4
  ctorSite = 8 # Double Indent
}
indentOperator.exemptScope = aloneEnclosed

project.excludePaths = [
  "glob:**/DEVELOPING_OPAL/demos/src/main/scala/org/opalj/fpcf/analyses/InterProceduralEscapeAnalysisDemo.scala",
  "glob:**/DEVELOPING_OPAL/demos/src/main/scala/org/opalj/fpcf/analyses/SimpleEscapeAnalysisDemo.scala"
]

newlines {
  source = keep
  afterCurlyLambdaParams = squash
  avoidForSimpleOverflow = [slc, tooLong, punct] # singe line comment, does not add newline if line would be too long after,  punctuation
  topLevelStatementBlankLines = [{ blanks { before = 1 }, maxNest = 0 }]
  sometimesBeforeColonInMethodReturnType = false
  ignoreInSyntax = false
}

binPack.parentConstructors = keep

literals {
  long = Upper
  float = Lower
  double = Lower
  hexPrefix = Lower
  hexDigits = Upper
  scientific = Lower
}
xmlLiterals.assumeFormatted = true

rewrite {
  rules = [
    SortModifiers,
    Imports
  ]
  sortModifiers.order = [
    "sealed", "abstract", "override",
    "private", "protected",
    "implicit", "final", "lazy"
  ]
  imports {
    expand = true
    sort = scalastyle
    groups = [
      ["scala\\.language\\..*",
        "scala\\.annotation\\..*",
        "scala\\.reflect\\..*"],
      ["javax?\\..*",
        "scala\\..*",
        "play\\..*"],
      ["org\\.junit\\..*",
        "org\\.scalacheck\\..*",
        "org\\.scalatest\\..*",
        "org\\.scalatestplus\\..*"],
      ["com\\.typesafe\\.config\\..*"],
      ["org\\.opalj\\..*"],
      ["scala\\.collection\\.parallel\\.CollectionConverters\\..*"]
      // Catch all
    ]
  }
}

align {
  preset = none
  allowOverflow = true
  openParenCtrlSite = true
  multiline = false
  inInterpolation = false
  tokens = [{
    code = ":"
    owners = [{
      regex = "Term\\.Param"
    }]
  }, {
    code = "="
    owners = [{
      regex = "Term\\.Param"
    }]
  }, {
    code = "=>"
    owners = [{
      regex = "Case"
    }]
  }
  ]
}