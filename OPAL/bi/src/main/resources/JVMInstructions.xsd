<?xml version="1.0" encoding="UTF-8"?>
<!--
  License (BSD Style License):
  Copyright (c) 2009, 2011
  Software Technology Group
  Department of Computer Science
  Technische Universität Darmstadt
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

  - Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
  - Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
  - Neither the name of the Software Technology Group or Technische
    Universität Darmstadt nor the names of its contributors may be used to
    endorse or promote products derived from this software without specific
    prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
-->
<schema xmlns="http://www.w3.org/2001/XMLSchema"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:opal="https://www.opal-project.de/bi/JVMInstructions"
    xmlns:xhtml="http://www.w3.org/1999/xhtml"
    xsi:schemaLocation="http://www.w3.org/2001/XMLSchema http://www.w3.org/2001/XMLSchema.xsd"
    targetNamespace="https://www.opal-project.de/bi/JVMInstructions"
	elementFormDefault="qualified"  attributeFormDefault="unqualified" >

    <annotation>
        <documentation xml:lang="en">
            <xhtml:p> This schema defines which information is specified for each Java Virtual
                Machine's instruction. <xhtml:br/> If a JVM instruction is fully specified w.r.t.
                this schema it is then possible to, e.g., automatically derive or generate a Java /
                Scala /... class to represent the instruction. Those
                information necessary to derive a class file reader and those information that are
                necessary for standard control and data flow analyses are immediately available. </xhtml:p>

            <xhtml:p>
                <xhtml:i> License (BSD Style License): <xhtml:br/> Copyright (c) 2009-2012 <xhtml:br/>
                    Michael Eichberg <xhtml:br/> www.opal-project.de <xhtml:br/> All rights
                    reserved. <xhtml:br/>
                </xhtml:i>
                <xhtml:br/> Redistribution and use in source and binary forms, with or without
                modification, are permitted provided that the following conditions are met: <xhtml:br/>
                <xhtml:br/> - Redistributions of source code must retain the above copyright notice,
                this list of conditions and the following disclaimer. <xhtml:br/> - Redistributions
                in binary form must reproduce the above copyright notice, this list of conditions
                and the following disclaimer in the documentation and/or other materials provided
                with the distribution. <xhtml:br/> - The names of its contributors may not be used
                to endorse or promote products derived from this software without specific prior
                written permission. <xhtml:br/>
                <xhtml:br/> THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
                IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY
                DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
                (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
                USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
                LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
                OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
                THE POSSIBILITY OF SUCH DAMAGE. </xhtml:p>

             <xhtml:p>
                June, 16 2012</xhtml:p>
        </documentation>
    </annotation>

    <element name="instructions">
        <annotation>
            <documentation xml:lang="en">Root element of the list of all instructions.</documentation>
        </annotation>
        <complexType>
            <sequence>
                <element name="documentation" minOccurs="0" maxOccurs="1">
                    <complexType>
                        <complexContent mixed="true">
                            <extension base="anyType"/>
                        </complexContent>
                    </complexType>
                </element>
                <element name="instruction" type="opal:Instruction" minOccurs="1" maxOccurs="256"/>
            </sequence>
        </complexType>
        <unique name="UniqueOpCode">
            <selector xpath="opal:instruction"/>
            <field xpath="@opcode"/>
        </unique>
    </element>

    <complexType name="Instruction">
        <annotation>
            <documentation xml:lang="en">A description of the properties of a JVM instruction.
			<xhtml:p>
				An instruction is either a specialized instruction, a parameterized
				instruction or "just" an instruction. A specialized instruction
				is an instruction which can be replaced by another (more general)
				instruction which has the same runtime semantics. E.g., the <xhtml:i>aload_0</xhtml:i>
				instruction is a specialized variant of the <xhtml:i>aload (local_variable_index : Int)</xhtml:i>
				instruction.
			</xhtml:p>
			</documentation>
        </annotation>
        <sequence>
			<element name="operation" type="opal:Operation" minOccurs="1" maxOccurs="1"/>
            <!-- meta information about the instruction -->
            <choice minOccurs="0" maxOccurs="1">
            	<element name="specialized" type="opal:SpecializedInstruction" />
            	<element name="parameterized" type="opal:ParameterizedInstruction"/>
            </choice>
            <!-- the information about the instruction itself -->
            <element name="format" type="opal:Format" minOccurs="1" maxOccurs="1"/>
            <element name="exceptions" type="opal:ThrownExceptions" minOccurs="0" maxOccurs="1"/>
        </sequence>
        <attribute name="name" type="ID" use="required"/>
        <attribute name="opcode" type="unsignedByte" use="required"/>
		<attribute name="deprecated" use="optional">
			<simpleType>
		        <restriction base="token"><enumeration value="1.6"/></restriction>
		    </simpleType>
		</attribute>
    </complexType>


    <!--
       -
       - General (meta level) information
       -
    -->

    <complexType name="Operation">
        <annotation>
            <documentation xml:lang="en"> A short description of the semantics of a JVM
                instruction. </documentation>
        </annotation>
        <simpleContent>
            <extension base="string"/>
        </simpleContent>
    </complexType>

   <complexType name="ParameterizedInstruction">
        <annotation>
            <documentation xml:lang="en">Some instructions are statically parameterized; i.e.
            information about the runtime semantics of the instruction and when and
            how the instruction can be used is encoded by the instruction as such; this
            information can be made explicit by parameterizing the instruction.
            E.g. <xhtml:i>i2d</xhtml:i> is a <xhtml:i>cast</xhtml:i> instruction
            that casts an <xhtml:i>int</xhtml:i> value to a <xhtml:i>double</xhtml:i> value.
            A parameterized instruction is an instruction that belongs to a certain
            category of instructions, but for which no other instruction exists that
            could be used instead.<xhtml:br/>
			A parameterized instruction does not have to declare a parameter.
			If we just want to identify that an instruction belongs to a certain
			category (e.g. that ldc_w belongs to the category of push instruction.)
			no specific parameter is specified.
            </documentation>
        </annotation>
        <sequence>
        	<choice minOccurs="0" maxOccurs="unbounded">
				<element name="operator">
					<complexType>
                    	<attribute name="name" use="required" type="opal:Operator"/>
                    </complexType>
                </element>
				<element name="type">
					<complexType>
                    	<attribute name="name" use="required">
                    		<simpleType>
                    			<union memberTypes="opal:JVM_Types">
                    				<simpleType>
                    					<restriction base="string">
                    						<enumeration value="byte_or_boolean"/>
											<enumeration value="reference_or_return_address"/>
											<enumeration value="void"/>
                    					</restriction>
                    				</simpleType>
                    			</union>
        					</simpleType>
                    	</attribute>
                    	<attribute name="value" use="optional" type="string"/>
                    </complexType>
				</element>
				<element name="classifier">
					<complexType>
                    	<attribute name="name" use="required" type="string"/>
                    </complexType>
                </element>
			</choice>
        </sequence>
        <attribute name="base" use="required">
			<simpleType>
				<restriction base="token">
					<enumeration value="and"/>
					<enumeration value="or"/>
					<enumeration value="xor"/>
					<enumeration value="add"/>
					<enumeration value="sub"/>
					<enumeration value="div"/>
					<enumeration value="mul"/>
					<enumeration value="neg"/>
					<enumeration value="rem"/>
					<enumeration value="shl"/>
					<enumeration value="shr"/>
					<enumeration value="ushr"/>
					<enumeration value="cmp"/>
					<enumeration value="cast"/>
					<enumeration value="return"/>
					<enumeration value="push"/>
					<enumeration value="newarray"/>
	            	<enumeration value="arrayload"/>
	            	<enumeration value="arraystore"/>
	            	<enumeration value="load"/>
					<enumeration value="store"/>
					<enumeration value="if"/>
					<enumeration value="if_cmp"/>
					<enumeration value="get"/>
					<enumeration value="put"/>
					<enumeration value="invoke"/>
	        	</restriction>
			</simpleType>
		</attribute>
    </complexType>


    <complexType name="SpecializedInstruction">
        <annotation>
            <documentation xml:lang="en">Identifies the generic instruction for this specialized instruction.
            The generic instruction is an instruction that has at most one parameter and given the parameter
            has excatly the same runtime semantics. E.g. aload(local_variable_index = 0) is (from the point of view of
            the runtime behavior) exactly the same as aload_0.
            </documentation>
        </annotation>
        <sequence>
			<element name="parameter" type="opal:SpecializedInstructionParameter" minOccurs="1" maxOccurs="1"/>
        </sequence>
		<attribute name="base" type="IDREF" use="required"/>
    </complexType>


    <complexType name="SpecializedInstructionParameter">
        <annotation>
            <documentation xml:lang="en">The value that needs to be used to initialize the base instruction
	 			when this specialized instruction is represented using the generic base instruction. The
	 			value can be either fixed or it can be a reference to a value.
	 		</documentation>
        </annotation>
		<attribute name="id" type="string" use="required"/>
		<attribute name="value" type="string" use="required"/>
    </complexType>


    <!--
         -
         - Specification of an instruction's class file format
         -
      -->

    <complexType name="Format">
        <annotation>
            <documentation xml:lang="en"> Definition of the class file format of an instruction.
                <xhtml:br/> For most instructions only one format is specified (in the following
                called the standard format (abbrv.:" std"). But, for some instructions a second
                format (the wide format) is defined. When reading a class file, this format needs to
 				be used if the direct predecessor of this instruction (in the code array) is the
 				<xhtml:i>wide</xhtml:i>	instruction.
            </documentation>
        </annotation>
        <sequence>
            <element name="std" type="opal:FormatElements" minOccurs="1" maxOccurs="1"/>
            <element name="wide" type="opal:FormatElements" minOccurs="0" maxOccurs="1"/>
        </sequence>
    </complexType>

    <complexType name="FormatElements">
    	<annotation>
            <documentation xml:lang="en">A list of format elements that precisely
            specify an instruction's format.
            </documentation>
        </annotation>
        <sequence>
            <element name="el" minOccurs="1" maxOccurs="unbounded" type="opal:FormatElementDeclaration"/>
            <element name="list" minOccurs="0" maxOccurs="1">
                <complexType>
                    <sequence>
                        <element name="el" minOccurs="1" maxOccurs="unbounded" type="opal:FormatElementDeclaration"/>
                    </sequence>
                    <attribute name="count" use="required" type="string"/>
					<attribute name="id" use="required" type="string"/>
                </complexType>
            </element>
        </sequence>
    </complexType>

    <complexType name="FormatElementDeclaration">
    	<annotation>
            <documentation xml:lang="en">The specification of a concrete format element.
            The id attribute is used to specify data flow dependencies. The type
            attribute is used to specify the type of the next format element (if any.)
            </documentation>
        </annotation>
        <attribute name="type" use="required" type="opal:AbstractFormatElement"/>
        <attribute name="id" type="opal:InstructionLocalID" use="optional"/>
    </complexType>

    <simpleType name="AbstractFormatElement">
        <annotation>
            <documentation> A format element (implicitly) defines the semantics of the next bytes
                in the code array. Furthermore, the format element (implicitly) specifies the number
                of bytes that need to be read and how. E.g. in case of the padding_bytes format
                element the number of bytes that need to be read depends on the offset of the
                instruction in the code array. <xhtml:br/> In case of variable length instructions -
                e.g. tableswitch - the number of bytes that need to be read is determined by the
                count attribute of the instruction's list "format element".
            </documentation>
        </annotation>
        <restriction base="token"/>
    </simpleType>

    <simpleType name="FormatElement-mnemonic">
        <annotation>
            <documentation> An instruction's mnemonic; an unsigned byte value. </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="mnemonic"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-ubyte_value">
        <annotation>
            <documentation>An unsigned byte value.</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ubyte"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-byte_value">
        <annotation>
            <documentation> A signed byte value. </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="byte"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-ushort_value">
        <annotation>
            <documentation>An unsigned short value.</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-short_value">
        <annotation>
            <documentation>A signed short value.</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="short"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-int_value">
        <annotation>
            <documentation>A signed int value.</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="int"/>
        </restriction>
    </simpleType>

     <simpleType name="FormatElement-atype">
        <annotation>
            <documentation>An unsigned byte that identifies the type of the array according to the following table:
            	<xhtml:ul>
					<xhtml:li>int T_BOOLEAN = 4</xhtml:li>
					<xhtml:li>int T_CHARACTER = 5</xhtml:li>
					<xhtml:li>int T_FLOAT = 6</xhtml:li>
					<xhtml:li>int T_DOUBLE = 7</xhtml:li>
					<xhtml:li>int T_BYTE = 8</xhtml:li>
					<xhtml:li>int T_SHORT = 9</xhtml:li>
					<xhtml:li>int T_INT = 10</xhtml:li>
					<xhtml:li>int T_LONG = 11</xhtml:li>
				</xhtml:ul>
			</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="atype"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-ushort_cp_index-to-call_site_specifier">
        <annotation>
            <documentation>
            An index in the constant pool (an unsigned short value)
            referring to a CONSTANT_InvokeDynamic_info structure (Java 7).
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort_cp_index->call_site_specifier"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-ushort_cp_index-to-methodref">
        <annotation>
            <documentation>
            An index in the constant pool (an unsigned short value)
            referring to a methodref info structure.
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort_cp_index->methodref"/>
        </restriction>
    </simpleType>

     <simpleType name="FormatElement-ushort_cp_index-to-interface_methodref">
        <annotation>
            <documentation>
            An index in the constant pool (an unsigned short value)
            referring to an interface methodref structure. Actually, an
            interface methodref and a "simple" methodref structure are
            structurally equal.
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort_cp_index->interface_methodref"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-ushort_cp_index-to-fieldref">
        <annotation>
            <documentation>An index in the constant pool referring to a fieldref
            entry .</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort_cp_index->fieldref"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-ushort_cp_index-to-reference_type">
        <annotation>
            <documentation>An index in the constant pool referring to a
            Constant_class entry that identifies either a class, interface or array type .</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort_cp_index->referenceType"/>
        </restriction>
    </simpleType>

  	<simpleType name="FormatElement-ushort_cp_index-to-object_type">
        <annotation>
            <documentation>An index in the constant pool referring to a
            Constant_class entry that identifies either a class or interface type .</documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort_cp_index->objectType"/>
        </restriction>
    </simpleType>

	 <simpleType name="FormatElement-ushort_cp_index-to-constant_value">
        <annotation>
            <documentation>An index in the constant pool referring to a constant
            value (int, float, long, double, string, class, method type, method handle) or a
            dynamically loaded constant.
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ushort_cp_index->constant_value"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-ubyte_cp_index-to-constant_value">
        <annotation>
            <documentation>An index in the constant pool (an unsigned short value).
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="ubyte_cp_index->constant_value"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-branchoffset">
        <annotation>
            <documentation>Execution proceeds at that offset
                from the address of the opcode of the given instruction.
                (A signed short value).
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="branchoffset"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-branchoffset_wide">
        <annotation>
            <documentation>Execution proceeds at that offset
                from the address of the opcode of the given instruction.
                (A signed int value).
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="branchoffset_wide"/>
        </restriction>
    </simpleType>

    <simpleType name="FormatElement-padding_bytes">
        <annotation>
            <documentation> The padding bytes format element does not have a fixed length; instead
                the length is determined by the offset of the instruction / the offset (w.r.t. the
                code array) of the next following information. The padding bytes format element is
                used when it is "necessary" that the next information is aligned to a word (4Byte)
                address. Hence, if the padding bytes format element is encountered between zero and
                three bytes have to be read. The content of the following padding bytes does not
                matter and can be ignored.<xhtml:br/>
                By today's standards this element is no longer meaningful.
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="padding_bytes"/>
        </restriction>
    </simpleType>

   <simpleType name="FormatElement-IGNORE">
        <annotation>
            <documentation>The next byte value always has a fixed value or no meaningful value;
            	hence, it is not necessary to store the value.<xhtml:br/>
            </documentation>
        </annotation>
        <restriction base="opal:AbstractFormatElement">
            <enumeration value="IGNORE"/>
        </restriction>
    </simpleType>

    <!--
        -
        - Exception related definitions.
        -
    -->

    <complexType name="ThrownExceptions">
        <annotation>
            <documentation xml:lang="en">
                Description of the exceptions that can regularly occur when
                the instruction is executed.
            </documentation>
        </annotation>
        <sequence>
            <element name="exception" minOccurs="1" maxOccurs="unbounded">
                <complexType>
                    <attribute name="type" use="required">
                        <simpleType>
							<union memberTypes="opal:JVM_InstructionExceptions opal:InstructionLocalID" />
                        </simpleType>
                    </attribute>
                </complexType>
            </element>
        </sequence>
    </complexType>

    <simpleType name="JVM_InstructionExceptions">
        <annotation>
            <documentation>Enumeration of all exceptions that might be thrown due to the execution
                of a particular instruction. I.e., this list only encompasses those exceptions that
                are directly related to the execution of a particular instruction. General errors
                (exceptions), such as "VirtualMachineError", which are not related to a specific
                exception are not listed.<xhtml:br/>
            	All these instruction are defined in the package <xhtml:i>java.lang</xhtml:i>.
            </documentation>
        </annotation>
        <restriction base="string">
            <enumeration value="java.lang.NullPointerException"/>
            <enumeration value="java.lang.ArrayStoreException"/>
            <enumeration value="java.lang.ArrayIndexOutOfBoundsException"/>
            <enumeration value="java.lang.NegativeArraySizeException"/>
            <enumeration value="java.lang.IllegalMonitorStateException"/>
            <enumeration value="java.lang.ClassCastException"/>
            <enumeration value="java.lang.ExceptionInInitializerError"/>
            <enumeration value="java.lang.ArithmeticException"/>
        </restriction>
    </simpleType>


    <!--
        -
        - Instruction independent definitions.
        -
      -->

     <simpleType name="Operator">
        <annotation>
            <documentation>The standard operators. eq = equal; ne = not equal;
            ge = greater or equal; le = less or equal; lt = less than; gt = greate than.
            </documentation>
        </annotation>
        <restriction base="string">
            <enumeration value="eq"/>
            <enumeration value="ne"/>
            <enumeration value="ge"/>
            <enumeration value="le"/>
            <enumeration value="lt"/>
            <enumeration value="gt"/>
        </restriction>
    </simpleType>

    <simpleType name="JVM_ComputationalTypeCategories">
         <annotation>
            <documentation>The JVM's computational types. (Type 1 are those
            values that occupy just one stack slot and Type 2 are those
            values that require two stack slots.)</documentation>
        </annotation>
        <union
            memberTypes="opal:JVM_ComputationalTypeCategory-category_1 opal:JVM_ComputationalTypeCategory-category_2"
        />
    </simpleType>

    <simpleType name="JVM_ComputationalTypeCategory">
        <annotation>
            <documentation>
                <xhtml:p>
                    <xhtml:b>This is an internal type used for documentation purposes
                        only.</xhtml:b>
                </xhtml:p>
            </documentation>
        </annotation>
        <restriction base="token"/>
    </simpleType>
    <simpleType name="JVM_ComputationalTypeCategory-category_1">
        <annotation>
            <documentation>One of the following values: int, float, reference, return_address </documentation>
        </annotation>
        <restriction base="opal:JVM_ComputationalTypeCategory">
            <enumeration value="category_1_value"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_ComputationalTypeCategory-category_2">
        <annotation>
            <documentation>One of the following values: long, double</documentation>
        </annotation>
        <restriction base="opal:JVM_ComputationalTypeCategory">
            <enumeration value="category_2_value"/>
        </restriction>
    </simpleType>


    <simpleType name="JVM_Types">
         <annotation>
            <documentation>All concrete types specified by the JVM Specification.</documentation>
        </annotation>
        <union memberTypes="opal:JVM_ReferenceTypes opal:JVM_PrimitiveTypes"/>
    </simpleType>

    <simpleType name="JVM_ReferenceTypes">
        <union
            memberTypes=" opal:JVM_ReferenceType-reference
                    opal:JVM_ReferenceType-objectref
                    opal:JVM_ReferenceType-arrayref
                    opal:JVM_ReferenceType-null"
        />
    </simpleType>

    <simpleType name="JVM_ReferenceType">
        <annotation>
            <documentation>
                <xhtml:p>
                    <xhtml:b>This is an internal type used for documentation purposes
                        only.</xhtml:b>
                </xhtml:p>
            </documentation>
        </annotation>
        <restriction base="token"/>
    </simpleType>

    <simpleType name="JVM_ReferenceType-reference">
        <annotation>
            <documentation xml:lang="en"> Each reference is either an objectref, an arrayref or a
                null value. An instruction is specified as operating on an reference, if further
                information is not available. </documentation>
        </annotation>
        <restriction base="opal:JVM_ReferenceType">
            <enumeration value="reference"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_ReferenceType-objectref">
        <annotation>
            <documentation xml:lang="en"> An objectref is a reference to an object which is not an
                array and which is not null.<xhtml:br/> Hence, this term is used in a more limited
                way when compared to the JVM spec.</documentation>
        </annotation>
        <restriction base="opal:JVM_ReferenceType">
            <enumeration value="objectref"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_ReferenceType-arrayref">
        <annotation>
            <documentation xml:lang="en">An array reference.</documentation>
        </annotation>
        <restriction base="opal:JVM_ReferenceType">
            <enumeration value="arrayref"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_ReferenceType-null">
        <annotation>
            <documentation xml:lang="en">Representation of the null value.</documentation>
        </annotation>
        <restriction base="opal:JVM_ReferenceType">
            <enumeration value="null"/>
        </restriction>
    </simpleType>

    <simpleType name="JVM_PrimitiveTypes">
        <annotation>
            <documentation xml:lang="en"> All primitive values.</documentation>
        </annotation>
        <union
            memberTypes="opal:JVM_PrimitiveType-byte
            opal:JVM_PrimitiveType-short
            opal:JVM_PrimitiveType-int
            opal:JVM_PrimitiveType-long
            opal:JVM_PrimitiveType-char
            opal:JVM_PrimitiveType-float
            opal:JVM_PrimitiveType-double
            opal:JVM_PrimitiveType-boolean
            opal:JVM_PrimitiveType-return_address"
        />
    </simpleType>

    <simpleType name="JVM_PrimitiveType">
        <annotation>
            <documentation>
                <xhtml:p>
                    <xhtml:b>This is an internal type used for documentation purposes
                        only.</xhtml:b>
                </xhtml:p>
            </documentation>
        </annotation>
        <restriction base="token"/>
    </simpleType>

    <!-- INTEGRAL TYPES -->
    <simpleType name="JVM_PrimitiveType-byte">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="byte"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_PrimitiveType-short">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="short"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_PrimitiveType-int">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="int"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_PrimitiveType-long">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="long"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_PrimitiveType-char">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="char"/>
        </restriction>
    </simpleType>

    <!-- FLOATING-POINT TYPES -->
    <simpleType name="JVM_PrimitiveType-float">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="float"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_PrimitiveType-double">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="double"/>
        </restriction>
    </simpleType>

    <!-- OTHER TYPES -->
    <simpleType name="JVM_PrimitiveType-boolean">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="boolean"/>
        </restriction>
    </simpleType>
    <simpleType name="JVM_PrimitiveType-return_address">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="return_address"/>
        </restriction>
    </simpleType>
    <!--
	<simpleType name="JVM_PrimitiveType-reference_or_return_address">
        <restriction base="opal:JVM_PrimitiveType">
            <enumeration value="reference_or_return_address"/>
        </restriction>
    </simpleType>
	-->


    <!--
        -
        - Helper types (definitions).
        -
    -->

    <simpleType name="InstructionLocalID">
    	<annotation>
            <documentation>
                If the name starts with a "$" then it is a reference to the place
                where the value is actually determined.
            </documentation>
        </annotation>
        <restriction base="string">
        	<pattern value="\$?\w+\d*"/>
        </restriction>
    </simpleType>
</schema>
